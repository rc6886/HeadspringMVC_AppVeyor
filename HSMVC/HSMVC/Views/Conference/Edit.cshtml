@model HSMVC.Controllers.Commands.ConferenceEditCommand

@{
    ViewBag.Title = "Edit";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Edit Conference</h1>

@using (Html.BeginForm())
{
    @Html.HiddenFor(x => x.Id)
    @RenderValidationErrors()

    <div class="form-group">
        @Html.LabelFor(x => x.Name)
        @Html.TextBoxFor(x => x.Name, new { @class = "form-control" })
    </div>
    <div class="form-group">
        @Html.LabelFor(x => x.HashTag)
        @Html.TextBoxFor(x => x.HashTag, new { @class = "form-control", @readonly="readonly" })
    </div>
    <div class="form-group">
        @Html.LabelFor(x => x.StartDate)
        @Html.TextBoxFor(x => x.StartDate, "{0:MM/dd/yyyy}", new { @class = "form-control" })
    </div>
    <div class="form-group">
        @Html.LabelFor(x => x.EndDate)
        @Html.TextBoxFor(x => x.EndDate, "{0:MM/dd/yyyy}", new { @class = "form-control" })
    </div>
    <div class="form-group">
        @Html.LabelFor(x => x.Cost)
        @Html.TextBoxFor(x => x.Cost, new { @class = "form-control" })
    </div>

    <button class="btn" type="submit">Save</button>
}

@helper RenderValidationErrors()
{
    var hasValidationErrors = ViewData.ModelState.Values.Any(x => x.Errors.Any());
    if (hasValidationErrors)
    {
        <div class="alert alert-danger">
            @foreach (var error in ViewData.ModelState.Values.SelectMany(x => x.Errors).ToArray())
            {
                <div>@error.ErrorMessage</div>
            }
        </div>
    }
}
